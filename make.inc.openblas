# blaspp with openblas https://github.com/xianyi/OpenBLAS
# (picaud.vincent at gmail.com)
#
# caveat: must use recent openblas release (> 5 Nov 2017)
#         reason: requires void* for complex number arguments
#         https://github.com/xianyi/OpenBLAS/commit/66ac898f6441f0cb334f76d0c5603c37962bf368#diff-d23268747e861f1166acbfc56e8b2917
#
# Assumes Linux 
#
# Create a symbolic link:
#     ln -s make.inc.openblas make.inc
#
# Optional: $OPENBLASINC is set to where open blas cblas.h exists, e.g., in ~/.profile
#     export OPENBLASINC=/home/XXX/local/OpenBlas/include
#
# Optional: $OPENBLASLIB is set to where libopenblas exists, e.g., in ~/.profile
#     export OPENBLASLIB=/home/XXX/local/OpenBlas/lib
#
# Then
#     make
# or alternatively (to force OPENBLASINC, OPENBLASLIB)
#     make OPENBLASLIB=/some/path OPENBLASINC=/some/path
#
# CAVEAT:
# Most of the time, for x86_64, blas subroutines like cdotc return by stack
# -> hence do *not* define BLAS_COMPLEX_RETURN_ARGUMENT
# To check if this choice is ok, run this test after compilation:
#  ./test dot --type c --dim 1 --incx 1 --incy 1
# if it fails, erase all object files and recompile with make -DBLAS_COMPLEX_RETURN_ARGUMENT
# 
# (the right configuration can be checked in OpenBLAS/common_x86_64.h)
#
CXX       ?= g++

LDFLAGS   = -fPIC -fopenmp 

CXXFLAGS  = -fPIC -fopenmp -MMD -g -std=c++11 -pedantic \
            -Wall -Wmissing-declarations \
            -Wno-unused-local-typedefs 

ifdef OPENBLASINC
      CXXFLAGS += -I${OPENBLASINC} 
endif

ifdef OPENBLASLIB
      LIBS = -L${OPENBLASLIB} 
endif

# note: -llapack is required for tests
LIBS +=  -llapack -lopenblas
